---
# @file release.yml
# @brief Github Actions to create a new release of this software project (= this repository).
#
# @description This GitHub Actions workflow automates the release process for the software project
# hosted in this repository. Its main objective is to create new releases while ensuring consistency
# and reliability in the release management.
#
# It automatically creates version tags in the project's repository, based on the ``version`` input
# parameter.
#
# The workflow generates release notes and metadata, which are used to create GitHub releases
# associated with the version tags. This helps maintain a clear record of all project releases and
# their corresponding changes. However, in case an intro text or description is needed, it must be
# added manually after the worflow succeeded.
#
# The workflow also handles artifact deployment, such as publishing Docker images to DockerHub
# (including updateing the description on DockerHu8b). This ensures that the released artifacts are
# readily available for users or other systems.
#
# It's essential to emphasize that this GitHub Actions workflow is the recommended and only authorized
# way to create releases. The workflow is triggered manually through the GitHub UI. All other ways to
# create releases are discouraged to maintain a standardized and error-free release process.
#
# By relying on this automated pipeline for releases, the project streamlines its release workflow,
# reduces the likelihood of errors, and provides users with access to stable and up-to-date software
# versions.


name: Deploy + Release

on:
  workflow_dispatch:
    # If the version is a v0.1.2-alpha or v0.1.2-beta, only this tag is
    inputs:
      version:
        description: Version (= new tag, e.g. v0.2.0)
        required: true

permissions:
  contents: read

jobs:
  update-version:
    permissions:
      contents: write
    uses: sommerfeld-io/.github/.github/workflows/module-release-antora-version.yml@main
    with:
      version: ${{ github.event.inputs.version }}

  release-website:
    runs-on: ubuntu-latest
    needs: update-version
    env:
      IMAGE: sommerfeldio/website
      DOCS_FILE: docs/modules/AUTO-GENERATED/pages/Dockerfile # without extension
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Deploy website to DockerHub
        run: |
          VERSION_TAG="${{ github.event.inputs.version }}"
          VERSION_TAG="${VERSION_TAG:1}"
          docker pull "$IMAGE:rc"

          docker tag "$IMAGE:rc" "$IMAGE:latest"
          docker tag "$IMAGE:rc" "$IMAGE:$VERSION_TAG"

          if [[ "${{ github.event.inputs.version }}" != *"-alpha"* && "${{ github.event.inputs.version }}" != *"-beta"* ]]; then
            docker push "$IMAGE:latest"
          fi
          docker push "$IMAGE:$VERSION_TAG"
        shell: bash
      - name: Convert README from Asciidoc to Markdown for DockerHub description
        run: |
          sudo apt-get install -y pandoc asciidoc
          asciidoc -b docbook ${{ env.DOCS_FILE }}.adoc
          mv ${{ env.DOCS_FILE }}.xml ./README.xml
          pandoc -f docbook -t markdown_strict README.xml -o README.md
        shell: bash
      - name: Update DockerHub description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.IMAGE }}
          short-description: ${{ github.event.repository.description }}
          readme-filepath: ./README.md

  github-release:
    runs-on: ubuntu-latest
    needs: release-website
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create tag and Github release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_REPO_AND_PROJECT }}
        # If a matching git tag does not yet exist, one will automatically get created
        # from the latest state of the default branch.
        run: |
          VERSION="${{ github.event.inputs.version }}"
          VERSION="${VERSION:1}"

          echo "[INFO] Create release"
          if [[ "${{ github.event.inputs.version }}" != *"-alpha"* && "${{ github.event.inputs.version }}" != *"-beta"* ]]; then
            gh release create "${{ github.event.inputs.version }}" --generate-notes
          else
            gh release create "${{ github.event.inputs.version }}" --prerelease --generate-notes
          fi
        shell: bash

  reset-version:
    needs: github-release
    permissions:
      contents: write
    uses: sommerfeld-io/.github/.github/workflows/module-release-antora-version.yml@main
    with:
      version: refs/heads/main

  on-failure:
    runs-on: ubuntu-latest
    needs: ['update-version', 'release-website', 'github-release', 'reset-version']
    if: failure()
    steps:
      - name: Send Pipeline Status to Google Chat
        if: always()
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: ${{ github.workflow }}
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          status: failure
